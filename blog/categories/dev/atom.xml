<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dev | Blamlam Blog]]></title>
  <link href="http://puliaiev.com/blog/categories/dev/atom.xml" rel="self"/>
  <link href="http://puliaiev.com/"/>
  <updated>2015-06-08T23:02:53+03:00</updated>
  <id>http://puliaiev.com/</id>
  <author>
    <name><![CDATA[Sergii Puliaiev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Первый Open Source проект]]></title>
    <link href="http://puliaiev.com/blog/2015/03/17/first-open-source-project/"/>
    <updated>2015-03-17T21:15:59+02:00</updated>
    <id>http://puliaiev.com/blog/2015/03/17/first-open-source-project</id>
    <content type="html"><![CDATA[<p>Наконец то, мой первый опенсорс проект. Если кто желает, присоединяйтесь!</p>

<!--more-->


<p>Суть проекта - расширить функционал сайта <a href="http://auto.ria.ua/">http://auto.ria.ua/</a> за счет плагина к браузеру Chrome.</p>

<p>Сейчас реализована функция подсчета средней цены на автомобили на текущей странице.
Идеи нового функционала пишите в комментариях!</p>

<p>Проект хостится на GitHub: <a href="https://github.com/SevaUA/autoriaua">https://github.com/SevaUA/autoriaua</a></p>

<p>Версию 0.1 можно скачать тут: <a href="https://github.com/SevaUA/autoriaua/releases/tag/v0.1">https://github.com/SevaUA/autoriaua/releases/tag/v0.1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansible]]></title>
    <link href="http://puliaiev.com/blog/2015/01/12/ansible/"/>
    <updated>2015-01-12T11:54:19+02:00</updated>
    <id>http://puliaiev.com/blog/2015/01/12/ansible</id>
    <content type="html"><![CDATA[<p>Сегодня поговорим о <a href="http://docs.ansible.com/intro.html">Ansible</a>. Ansible - это система управления компьютерами. Она имеет <a href="http://docs.ansible.com/modules_by_category.html">множество модулей</a>, для работы с чем угодно: выполнение скриптов, работа с файловой системой, системами контроля версий, менеджерами пакетов и тд. Мне он нравится тем что у него минимум зависимостей. Работает поверх ssh, требует установленный python, а он есть почти везде. Ansible я использовал в своем <a href="http://tw2vk.pp.ua">проекте</a> для деплоя.</p>

<p>Для начала установим его. <!-- more --> Можно сделать так:</p>

<pre><code>pip install ansible
</code></pre>

<p>Но я так делать не люблю, во первых это требует sudo (по крайней мере в MacOSX), во вторых если все подряд устанавливать, глобальных список установленных пакетов python будет огромен. В python есть замечательная утилита virtualenv. Ей я и пользовался для установки Ansible.</p>

<p>Virtualenv устанавливается командой:</p>

<pre><code>pip install virtualenv
</code></pre>

<p>дальше создаем виртуальное окружение:</p>

<pre><code>virtualenv env
</code></pre>

<p>env - имя окружения. Не забудьте его добавить в игнор, в своей системе контроля версий. После этой команды получим env папочку в текущей директории.</p>

<pre><code>. env/bin/activate
</code></pre>

<p>Активирует виртуальное окружение. Теперь команды pip и python работают в этом окружении.</p>

<p>Можно делать</p>

<pre><code>pip install ansible
</code></pre>

<p>и Ansible будет установлен в наше окружение.</p>

<p>Дальше нам нужен файл ansible.cfg, в текущем каталоге, со следующим содержимым (настройки ansible, по умолчанию он умеет брать настройки с текущего каталога):</p>

<pre><code>[defaults]
hostfile = ./hosts

[ssh_connection]
ssh_args = -o ForwardAgent=yes
</code></pre>

<p>Так же файл hosts, в нем будут хосты, которыми мы хотим управлять:</p>

<pre><code>[t2v]
134.100.60.1
</code></pre>

<p>И самое главное, плейбук (yaml файл), в котором мы пишем что хотим сделать на удаленной машине. Пример:
    
    &mdash;
    - hosts: t2v
      user: root
      sudo: yes
      vars:
        proj_dir: ../../../
        proj_name: twitterexporter_1
        dest_dir: /app/
      tasks:
      - name: Apt
        apt: name=python-pip state=present
      - name: Prepare vars
        include_vars: ../.env
      - name: sync files
        synchronize: src={{proj_dir}}{{proj_name}} dest={{dest_dir}}
    </p>

<p>В первой строке сказали с какими машинами работать, дальше задали переменные, далее пошел раздел tasks, с заданиями. Установить, если не установленно python-pip, переменные окружения задать и синхронизировать папки (не явно работает с rsync). У меня были проблемы с rsync он пробовал подключиться к localhost по ssh. Чтоб это побороть я прописывал как нужно подключаться к localhost. Недавно все переписывал, убрал эту настройку, все заработало и так, наверное Ansible team все пофиксили.</p>

<p>Для запуска всего этого дела, используем команду:</p>

<pre><code>ansible-playbook t2v.yaml
</code></pre>

<p>Радуемся :)</p>

<p>Для того чтоб завершить работу с виртуальным окружением, пишем:</p>

<pre><code>deactivate
</code></pre>

<p>В следующей статье планирую написать детальней о модуле digital_ocean.</p>

<p><em>Дополнение:</em> в hosts файле можно писать домены:</p>

<pre><code>[t2v]
tw2vk.pp.ua
</code></pre>

<p><em>Дополнение:</em> для проверки доступа на сервер можно выполнить:</p>

<pre><code>ansible t2v -m ping -u root
</code></pre>
]]></content>
  </entry>
  
</feed>
